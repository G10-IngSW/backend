const http = require('http');
const { promisify } = require('util');
const assert = require('assert');
const app = require('../server');
const mongoose = require('mongoose');

const PORT = 3000;

const server = http.createServer(app);

const makeRequest = promisify((options, body, callback) => {
  const req = http.request(options, (res) => {
    let data = '';

    res.on('data', (chunk) => {
      data += chunk;
    });

    res.on('end', () => {
      callback(null, { statusCode: res.statusCode, body: data });
    });
  });

  req.on('error', (error) => {
    callback(error);
  });

  if (body) {
    req.write(JSON.stringify(body));
  }

  req.end();
});

beforeAll((done) => {
  server.listen(3000, () => {
    done();
  });
}, 10000);

afterAll((done) => {
  server.close(() => {
    // Chiudi la connessione al database
    mongoose.disconnect()
      .then(() => {
        console.log('Connessione al database chiusa con successo');
        done();
      })
      .catch((error) => {
        console.error('Errore durante la chiusura della connessione al database:', error);
        done();
      });
  });
}, 10000);


describe('API Account', () => {
  it('should register a new account', async () => {
    const options = {
      method: 'POST',
      path: '/registra',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    const userData = {
      nome: 'Test User',
      email: 'test@example.com',
      password: 'testpassword',
    };

    const response = await makeRequest(options, userData);

    assert.strictEqual(response.statusCode, 200);
  });

  it('should return 400 for missing data during registration', async () => {
    const options = {
      method: 'POST',
      path: '/registra',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    const userData = {
      // Mancano dati obbligatori (nome, email, password)
    };

    const response = await makeRequest(options, userData);

    assert.strictEqual(response.statusCode, 400);
  });

  it('should return 400 for non-string data during registration', async () => {
    const options = {
      method: 'POST',
      path: '/registra',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    const userData = {
      nome: 123, // Nome non è una stringa
      email: ['invalid'], // Email non è una stringa
      password: true, // Password non è una stringa
    };

    const response = await makeRequest(options, userData);

    assert.strictEqual(response.statusCode, 400);
  });

  it('should return 409 for duplicate email during registration', async () => {
    const options = {
      method: 'POST',
      path: '/registra',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    const existingUser = {
      nome: 'Existing User',
      email: 'existing@example.com',
      password: 'existingpassword',
    };
    await makeRequest(options, existingUser);

    const duplicateUser = {
      nome: 'Duplicate User',
      email: 'existing@example.com',
      password: 'duplicatepassword',
    };
    const response = await makeRequest(options, duplicateUser);

    assert.strictEqual(response.statusCode, 409);
  });

  // Aggiungi altri casi di test a seconda delle tue esigenze
});